trigger:
- main

resources:
- repo: self

variables:
  tag: '1.0.$(Build.BuildId)'
  imageRepo: nttdatapi
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  acrsecret: nttdataauth
  acrdevurl: 'arcndapi.azurecr.io'

stages:
- stage: Build
  displayName: Build NetCore Proyect
  jobs:
    - job: BuildNetcore
      pool:
       vmImage: windows-latest
      steps:         

        - task: UseDotNet@2  
          displayName: Install NetCore 7
          inputs:  
            packageType: 'sdk'  
            version: '7.x'  

        # - task: SonarCloudPrepare@1
        #   inputs:
        #     SonarCloud: 'SonarCloud'
        #     organization: 'testroject'
        #     scannerMode: 'MSBuild'
        #     projectKey: 'TestProject_NttDataApi'
        #     projectName: 'NttDataApi'
            
        - task: DotNetCoreCLI@2
          displayName: 'Restore NuGet packages'
          inputs:
            command: 'restore'        
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build solution'
          inputs:
            command: 'build'
            # projects: '**/*.csproj'
            projects: 'NTTData.Api/NTTData.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Run unit tests'
          inputs:
            command: 'test'
            projects: '**/*.csproj'
            # workingDirectory: 'NTTData.Test/Test.csproj'
            arguments: '--configuration Release --collect "Code Coverage"'
            publishTestResults: true
            testRunTitle: 'Unit Tests'
          continueOnError: true


        # - task: SonarCloudAnalyze@1
        #   displayName: 'SonarQube analysis'

        # - task: SonarCloudPublish@1
        #   displayName: 'Publish SonarQube analysis'
        #   inputs:
        #     pollingTimeoutSec: '300'


#     - job: BuildDocker
#       dependsOn: BuildNetcore
#       pool:
#        vmImage: ubuntu-latest
#       steps:
#       - task: Docker@2
#         displayName: Build and Push the image
#         inputs:
#           containerRegistry: 'ARCNttData'
#           repository: '$(imageRepo)'
#           command: 'buildAndPush'
#           Dockerfile: '$(Build.SourcesDirectory)/NTTData.Api/Dockerfile'
#           buildContext: '$(Build.SourcesDirectory)/NTTData.Api/'
#           tags: '$(tag)'
          
         

#       - task: PublishPipelineArtifact@1
#         inputs:
#           targetPath: '$(Pipeline.Workspace)/s/deployment'
#           artifact: 'manifests'
#           publishLocation: 'pipeline'

# - stage: Deploy
#   displayName: Deploy to Dev
#   dependsOn: Build
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy to AKS
#     environment: 'Production' 
#     pool:
#       vmImage: ubuntu-latest
#     strategy:
#       runOnce:
#         deploy:
#           steps:

#             - task: DownloadPipelineArtifact@2
#               inputs:
#                 buildType: 'current'
#                 artifactName: 'manifests'
#                 targetPath: '$(Pipeline.Workspace)/manifests'

#             - task: KubernetesManifest@0
#               inputs:
#                 action: 'createSecret'
#                 kubernetesServiceConnection: 'ClusterNttData'
#                 namespace: 'nttdatadev'
#                 secretType: 'dockerRegistry'
#                 secretName: '$(acrsecret)'
#                 dockerRegistryEndpoint: 'ARCNttData'

#             - task: KubernetesManifest@0
#               inputs:
#                 action: 'deploy'
#                 kubernetesServiceConnection: 'ClusterNttData'
#                 namespace: 'nttdatadev'
#                 manifests: |
#                   $(Pipeline.Workspace)/manifests/deployment.yml
#                   $(Pipeline.Workspace)/manifests/service.yml
#                 containers: '$(acrdevurl)/$(imageRepo):$(tag)'
#                 imagePullSecrets: '$(acrsecret)'